package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi"
)

type BaseController struct {
	mess string
}

func NewBaseController(mess string) *BaseController {
	return &BaseController{
		mess: mess,
	}
}

func (c *BaseController) Route1() *chi.Mux {
	r := chi.NewRouter()
	r.Get("/{type}/{name}", c.handleValueRequest) // Обработчик для /value/type/name
	return r
}

func (c *BaseController) handleValueRequest(w http.ResponseWriter, r *http.Request) {
	valueType := chi.URLParam(r, "type")
	valueName := chi.URLParam(r, "name")

	response := fmt.Sprintf("Handling value request for type: %s, name: %s\n", valueType, valueName)
	w.Write([]byte(response))
}

func main() {
	r := chi.NewRouter()

	// Создание экземпляра BaseController
	baseController := NewBaseController("Hello from BaseController!")

	// Получение роутера для Route1
	r.Mount("/value", baseController.Route1())

	// Определение обработчиков для корневых путей
	r.Post("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("POST request handled"))
	})

	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("GET request handled\n"))
	})

	addr := "localhost:8080"
	log.Printf("Starting server at %s\n", addr)
	err := http.ListenAndServe(addr, r)
	if err != nil {
		log.Fatalf("Server error: %s", err)
	}
}
